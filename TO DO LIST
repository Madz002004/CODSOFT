#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Structure to represent a task
struct Task {
    string description;
    bool completed;

    Task(const string& desc) : description(desc), completed(false) {}
};

// Function prototypes
void addTask(vector<Task>& tasks);
void viewTasks(const vector<Task>& tasks);
void markCompleted(vector<Task>& tasks);
void removeTask(vector<Task>& tasks);

int main() {
    vector<Task> tasks;
    char choice;

    do {
        cout << "\n===== To-Do List Manager =====\n";
        cout << "1. Add Task\n";
        cout << "2. View Tasks\n";
        cout << "3. Mark Task as Completed\n";
        cout << "4. Remove Task\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch(choice) {
            case '1':
                addTask(tasks);
                break;
            case '2':
                viewTasks(tasks);
                break;
            case '3':
                markCompleted(tasks);
                break;
            case '4':
                removeTask(tasks);
                break;
            case '5':
                cout << "Exiting program...\n";
                break;
            default:
                cout << "Invalid choice. Please enter a number from 1 to 5.\n";
                break;
        }
    } while(choice != '5');

    return 0;
}

void addTask(vector<Task>& tasks) {
    cin.ignore(); // Clear input buffer
    string description;
    cout << "Enter task description: ";
    getline(cin, description);
    tasks.push_back(Task(description));
    cout << "Task added successfully.\n";
}

void viewTasks(const vector<Task>& tasks) {
    cout << "\n===== Tasks List =====\n";
    for(size_t i = 0; i < tasks.size(); ++i) {
        cout << i + 1 << ". ";
        cout << tasks[i].description << " - ";
        if(tasks[i].completed)
            cout << "Completed";
        else
            cout << "Pending";
        cout << endl;
    }
}

void markCompleted(vector<Task>& tasks) {
    viewTasks(tasks);
    size_t index;
    cout << "Enter task number to mark as completed: ";
    cin >> index;
    if(index > 0 && index <= tasks.size()) {
        tasks[index - 1].completed = true;
        cout << "Task marked as completed.\n";
    } else {
        cout << "Invalid task number.\n";
    }
}

void removeTask(vector<Task>& tasks) {
    viewTasks(tasks);
    size_t index;
    cout << "Enter task number to remove: ";
    cin >> index;
    if(index > 0 && index <= tasks.size()) {
        tasks.erase(tasks.begin() + index - 1);
        cout << "Task removed.\n";
    } else {
        cout << "Invalid task number.\n";
    }
}
